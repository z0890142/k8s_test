resources:
- '@type': type.googleapis.com/envoy.config.listener.v3.Listener
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 80
  filter_chains:
  - filters:
    - name: envoy.filters.network.http_connection_manager
      typed_config:
        '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager       
        stat_prefix: ingress_http
        access_log:
        - name: envoy.access_loggers.stdout
          typed_config:
            '@type': type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
            log_format:
              json_format:
                PROTOCOL: '%PROTOCOL%'
                authority: '%REQ(:AUTHORITY)%'
                bytes_received: ' %BYTES_RECEIVED%'
                bytes_sent: '%BYTES_SENT%'
                duration: '%DURATION%'
                grpc_status: '%GRPC_STATUS%'
                method: '%REQ(:METHOD)%'
                path: '%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%'
                response_code: '%RESPONSE_CODE%'
                response_flags: '%RESPONSE_FLAGS%'
                start_time: '%START_TIME%'
                upstream_cluster: '%UPSTREAM_CLUSTER%'
                upstream_host: '%UPSTREAM_HOST%'
                upstream_service_time: '%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%'
                user_agent: '%REQ(USER-AGENT)%'
                x-request-id: '%REQ(X-REQUEST-ID)%'
                x_forwarded_for: '%REQ(X-FORWARDED-FOR)%'
        http_filters:
        - name: envoy.filters.http.router
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
        route_config:
          name: dma-http-route
          virtual_hosts:
            domains:
            - '*'
            name: http-service
            routes:
            - match:
                prefix: /grafana/
              route:
                cluster: grafana
                retry_policy:
                  retry_on: gateway-error
                timeout: 0s
            - match:
                prefix: "/prometheus/"
              route:
                cluster: prometheus
                prefix_rewrite: "/"
                retry_policy:
                  retry_on: gateway-error
                timeout: 0s
            